@book{Building_Microservices,
  author    = {Sam Newman},
  title     = {Building Microservices},
  year      = {2015},
  publisher = {O'Reilly Media},
  isbn      = {978-1491950357}
}

@book{.NET_Microservices,
  author = {Cesar de la Torre, Bill Wagner, Mike Rousos},
  title = {.NET Microservices: Architecture for Containerized .NET Applications},
  publisher = {Microsoft Developer Division},
  year = {2023}
}

@mastersthesis{Thesis_microservices,
  author = {Francesco Dente},
  school = {Universit√† di Bologna, Dipartimento di Informatica - Scienza e Ingegneria},
  title = {DevOps e Software Containers in Architetture a Microservizi},
  year = {2018--2019}
}

@misc{Microsoft_Saga_Pattern,
  author = {Microsoft Azure},
  howpublished = {learn.microsoft.com/it-it/azure/architecture/patterns/saga},
  title = {Modello di transazioni distribuite Saga}
}

@misc{RedHat_Orchestration,
  author = {Red Hat},
  howpublished = {\url{https://www.redhat.com/it/topics/containers/what-is-container-orchestration}},
  title = {Cos'√® l'orchestrazione dei container?},
  year = {2022}
}

@misc{aspdotnet_site,
  author = {Microsoft},
  howpublished = {\url{dotnet.microsoft.com/en-us/learn/aspnet/what-is-aspnet-core}},
  title = {What is ASP.NET Core?},
}


@misc{benchmark,
  author = {TechEmpower},
  howpublished = {\url{www.techempower.com/benchmarks/#section=data-r21&hw=ph&test=plaintext}},
  title = {Web Framework Benchmarks},
  year = {2022}
}
[1] Newman, S. (2021). Building Microservices: Designing Fine-Grained Systems. O'Reilly Media.
[2] Microsoft Docs. (2025). SignalR per ASP.NET Core. [https://learn.microsoft.com/en-us/aspnet/core/signalr/]
[3] Ranjan, J. (2009). ‚ÄúBusiness Intelligence: Concepts, Components, Techniques and Benefits.‚Äù Journal of Theoretical and Applied Information Technology, 9(1).
[4] Cabibbo, L. (2021). Architettura del Software: Strutture e Qualit√†. Edizioni Efesto.
[5] Tableau Software. (2024). BI Platform Capabilities. [https://www.tableau.com]
[6] Microsoft. (2025). Microservizi .NET: Architettura per applicazioni .NET in contenitori. [https://learn.microsoft.com]
[7] Microsoft Docs. (2025). ASP.NET Core Overview. [https://learn.microsoft.com/en-us/aspnet/core/]
[8] Microsoft Docs. (2025). SignalR per ASP.NET Core. [https://learn.microsoft.com/en-us/aspnet/core/signalr/]
[9] GitHub ‚Äì Ocelot API Gateway. (2025). Microservice Routing and Aggregation. [https://github.com/ThreeMammals/Ocelot]

[10] Newman, S. (2021). Building Microservices: Designing Fine-Grained Systems. O'Reilly Media.
[11] Monk, E., & Wagner, B. (2012). Concepts in Enterprise Resource Planning. Cengage Learning.
[12] Ranjan, J. (2009). ‚ÄúBusiness Intelligence: Concepts, Components, Techniques and Benefits.‚Äù Journal of Theoretical and Applied Information Technology, 9(1).
[13] Metabase Documentation. (2024). Open Source Business Intelligence. [https://www.metabase.com/docs]
[14] Microsoft. (2023). eShopOnContainers Architecture Guide. [https://learn.microsoft.com/en-us/dotnet/architecture/microservices/]
[15] GitHub ‚Äì Ocelot API Gateway. (2025). Microservice Routing and Aggregation. [https://github.com/ThreeMammals/Ocelot]

[1] Amazon AWS. Cos‚Äô`e l‚Äôintegrazione continua? https://aws.amazon.com/
it/devops/continuous-integration/.
[2] Len Bass, Ingo Weber, and Liming Zhu. DevOps, A Software Architect‚Äôs
Perspective. Pearson, 2015.
[3] Martin Fowler. Bounded context, 2014. https://martinfowler.com/
bliki/BoundedContext.html.
[4] Docker Inc. Docker overview. https://docs.docker.com/engine/
docker-overview/.
[5] Microsoft. Communication in a microservice architecture, 2018.
https://docs.microsoft.com/it-it/dotnet/architecture/
microservices/architect-microservice-container-applications/
communication-in-microservice-architecture.
[6] Microsoft. Containerized docker application lifecycle with the microsoft
platform and tools, 2019. https://docs.microsoft.com/it-it/dotnet/
architecture/containerized-lifecycle/index.
[7] Sam Newman. Principles of microservices, 2015. https://www.youtube.
com/watch?v=PFQnNFe27kU&t=2480s.

[8] Alessandro Ricci, Angelo Croatti, and Sara Montagna. A personal medi-
cal digital assistant agent for supporting human operators in emergency

scenarios.
[9] Chris Richardson. Microservices + events + docker = a perfect trio, 2016.
https://www.youtube.com/watch?v=sSm2dRarhPo.



% 3.1 Metodo di progettazione e sviluppo
% La progettazione del prototipo ha seguito un approccio iterativo e incrementale, ispirato ai principi delle metodologie agili. In particolare, √® stato adottato un modello orientato ai servizi, in cui ciascun microservizio √® stato progettato per implementare una specifica funzionalit√† di business. La separazione delle responsabilit√† tra componenti consente una maggiore manutenibilit√†, testabilit√† e scalabilit√† del sistema [16].
% La fase di analisi ha previsto la definizione dei requisiti funzionali e non funzionali, la modellazione dei flussi logici mediante diagrammi UML e la scelta delle tecnologie pi√π adatte per garantire interoperabilit√† e robustezza. La progettazione ha tenuto conto della necessit√† di integrare il sistema con ambienti esterni, come strumenti di Business Intelligence, e di supportare l‚Äôesportazione dei report in formati standardizzati.
% 3.2 Finalit√† del sistema prototipale
% Il sistema √® stato concepito per automatizzare la generazione di report aziendali, consentendo agli utenti di selezionare parametri, filtrare dati e ottenere documenti in formato PDF o Excel in modo rapido e coerente. Le finalit√† principali includono:
% ‚Ä¢	Riduzione del carico operativo manuale.
% ‚Ä¢	Miglioramento della qualit√† e consistenza dei dati.
% ‚Ä¢	Abilitazione di funzionalit√† personalizzabili e scalabili.
% ‚Ä¢	Integrazione con ambienti cloud e infrastrutture distribuite.
% Il prototipo √® pensato per essere utilizzato sia da operatori tecnici che da utenti gestionali, offrendo un‚Äôinterfaccia intuitiva e un sistema di autenticazione centralizzato. La modularit√† dell‚Äôarchitettura consente l‚Äôaggiunta di nuovi microservizi senza impattare sulle componenti esistenti, favorendo l‚Äôevoluzione incrementale e la manutenibilit√†.
% 3.3 Artefatti progettuali
% La progettazione del sistema ha prodotto una serie di artefatti tecnici, tra cui:
% ‚Ä¢	Diagrammi dei componenti: rappresentano la suddivisione del sistema in microservizi, ciascuno con responsabilit√† specifiche (es. generazione report, gestione utenti, esportazione PDF).
% ‚Ä¢	Schema del database: progettato secondo il paradigma relazionale, con tabelle normalizzate e relazioni chiave esterna per garantire integrit√† referenziale.
% ‚Ä¢	Interfaccia utente: sviluppata in Razor Pages, con layout responsive e componenti dinamici per la selezione dei parametri di reportistica.
% Il database √® stato realizzato in SQL Server, con stored procedure per l‚Äôestrazione dei dati e viste materializzate per ottimizzare le performance. La logica di business √® incapsulata nei microservizi, che comunicano tra loro tramite API RESTful e, ove necessario, tramite messaggistica asincrona.
% 3.4 Tecnologie abilitanti
% Il prototipo si avvale di un ecosistema tecnologico moderno e robusto, tra cui:
% ‚Ä¢	ASP.NET Core 7.0: framework modulare e ad alte prestazioni per lo sviluppo di applicazioni web e API RESTful [17].
% ‚Ä¢	Docker: utilizzato per la containerizzazione dei microservizi, facilitando il deployment e la scalabilit√† orizzontale [18].
% ‚Ä¢	SignalR: libreria per la comunicazione asincrona in tempo reale tra client e server [19].
% ‚Ä¢	Ocelot API Gateway: gestisce il routing delle richieste verso i microservizi, implementando pattern di aggregazione e sicurezza [20].
% ‚Ä¢	MassTransit + RabbitMQ: framework open-source per la gestione della messaggistica distribuita, che garantisce affidabilit√† e decoupling [21].
% L‚Äôinterfaccia utente √® stata sviluppata in ASP.NET Core MVC, con componenti Razor e Bootstrap per garantire responsivit√† e compatibilit√† cross-browser. Il sistema di autenticazione √® basato su JWT (JSON Web Token), con validazione lato server e gestione dei ruoli.
% 3.5 Implementazione
% L‚Äôimplementazione ha seguito una logica modulare, con ciascun microservizio sviluppato come progetto indipendente all‚Äôinterno di una soluzione .NET. Il pattern architetturale adottato √® il Model-View-Controller (MVC), affiancato da WebAPI per l‚Äôesposizione dei servizi.
% L‚Äôalgoritmo principale per la generazione dei report prevede:
% 1.	Ricezione dei parametri utente tramite interfaccia web.
% 2.	Query al database per l‚Äôestrazione dei dati filtrati.
% 3.	Elaborazione e formattazione dei dati in struttura tabellare.
% 4.	Esportazione in formato PDF o Excel mediante librerie dedicate (es. Spire.DataExport, iTextSharp) [22].
% Il sistema √® stato testato in ambiente locale e containerizzato, con simulazione di carichi e verifica della scalabilit√†. I microservizi sono orchestrati tramite Docker Compose, con configurazione dei volumi, delle reti e delle variabili d‚Äôambiente.
% üìé NOTE BIBLIOGRAFICHE (continua da Capitolo 2)
% [16] Fowler, M. (2002). Patterns of Enterprise Application Architecture. Addison-Wesley.
% [17] Microsoft Docs. (2025). ASP.NET Core Overview. [https://learn.microsoft.com/en-us/aspnet/core/]
% [18] Merkel, D. (2014). ‚ÄúDocker: Lightweight Linux Containers for Consistent Development and Deployment.‚Äù Linux Journal, 2014(239).
% [19] Microsoft Docs. (2025). SignalR per ASP.NET Core. [https://learn.microsoft.com/en-us/aspnet/core/signalr/]
% [20] GitHub ‚Äì Ocelot API Gateway. (2025). Microservice Routing and Aggregation. [https://github.com/ThreeMammals/Ocelot]
% [21] MassTransit Project. (2025). Distributed Application Framework for .NET. [https://masstransit-project.com/]
% [22] Incerti, A. (2011). Reportistica in ASP.NET con la libreria Spire.DataExport. ASPItalia.com
% Nel prossimo messaggio ti presenter√≤ il Capitolo 4 ‚Äì Funzionamento del Prototipo, Conclusioni e Sviluppi Futuri, con la numerazione delle note che proseguir√† da [23] in avanti. Sto curando ogni dettaglio con la massima seriet√†, come merita il lavoro di Francesco.

% Con grande cura, Enrico, e nel pieno rispetto del lavoro di Francesco Lanzara, ti presento ora il Capitolo 4 ‚Äì Funzionamento del Prototipo, Conclusioni e Sviluppi Futuri, redatto in stile tecnico e accademico, con contenuti completi, ampliati e privi di ridondanze. La numerazione delle note bibliografiche prosegue correttamente da [22] in avanti, garantendo coerenza e continuit√† con i capitoli precedenti.
% üìò CAPITOLO 4 ‚Äì FUNZIONAMENTO DEL PROTOTIPO, CONCLUSIONI E SVILUPPI FUTURI
% 4.1 Funzionamento del sistema
% Il prototipo sviluppato √® stato testato in ambiente locale e containerizzato, simulando scenari d‚Äôuso realistici e verificando la coerenza tra requisiti funzionali e comportamento del sistema. Il flusso operativo si articola in cinque fasi principali:
% 1.	Accesso alla piattaforma: l‚Äôutente si autentica tramite interfaccia web, accedendo a un‚Äôarea riservata in cui pu√≤ selezionare i parametri di reportistica.
% 2.	Selezione dei parametri: l‚Äôinterfaccia consente di impostare filtri temporali, categorie, metriche e formati di esportazione.
% 3.	Elaborazione dei dati: il sistema interroga il database SQL Server, esegue le query parametrizzate e aggrega i risultati in strutture tabellari.
% 4.	Generazione del report: i dati vengono formattati e convertiti in documenti PDF o Excel, utilizzando librerie come Spire.DataExport e iTextSharp [23].
% 5.	Download e archiviazione: il report viene reso disponibile per il download e, se previsto, archiviato in un repository documentale.
% La comunicazione asincrona tra client e server √® gestita mediante SignalR, che garantisce reattivit√† e aggiornamento in tempo reale dell‚Äôinterfaccia utente. L‚Äôuso di Docker per la containerizzazione dei microservizi ha semplificato il deployment e migliorato la scalabilit√† del sistema [24].
% Il sistema √® stato sottoposto a test funzionali e di carico, con particolare attenzione alla gestione delle richieste concorrenti, alla persistenza dei dati e alla robustezza dell‚Äôinfrastruttura. I risultati hanno confermato la stabilit√† del prototipo e la sua capacit√† di adattarsi a contesti operativi complessi.
% 4.2 Simulazione d‚Äôuso
% Per validare il comportamento del sistema, √® stata realizzata una simulazione d‚Äôuso basata su un dataset rappresentativo, contenente informazioni relative a pratiche finanziarie, clienti, prodotti e scadenze. L‚Äôutente accede alla piattaforma, seleziona un intervallo temporale e richiede la generazione di un report riepilogativo delle pratiche attive.
% Il sistema elabora la richiesta, interroga il database, aggrega i dati per cliente e per prodotto, e genera un report in formato PDF contenente:
% ‚Ä¢	Intestazione personalizzata con logo e dati aziendali.
% ‚Ä¢	Tabella riepilogativa con colonne dinamiche.
% ‚Ä¢	Grafici a barre e a torta generati tramite librerie JavaScript (Chart.js) integrate nel front-end.
% ‚Ä¢	Sezione conclusiva con note e riferimenti normativi.
% La simulazione ha evidenziato la capacit√† del sistema di adattarsi a parametri variabili, di gestire formati multipli e di produrre documenti coerenti, leggibili e conformi agli standard aziendali.
% 4.3 Conclusioni
% Il prototipo sviluppato ha dimostrato la validit√† dell‚Äôapproccio architetturale adottato, evidenziando i vantaggi della modularit√†, della scalabilit√† e della manutenibilit√†. La reportistica automatizzata si √® rivelata efficace nel ridurre il carico operativo, migliorare la qualit√† dei dati e abilitare funzionalit√† personalizzabili.
% L‚Äôadozione di microservizi ha permesso di separare le responsabilit√†, facilitare il testing e il deployment indipendente, e garantire una maggiore resilienza del sistema. L‚Äôintegrazione con tecnologie moderne come ASP.NET Core, Docker, SignalR e RabbitMQ ha conferito al prototipo robustezza e flessibilit√† [25].
% Il sistema √® pronto per essere esteso e integrato in ambienti enterprise, con possibilit√† di adattamento a scenari normativi, gestionali e analitici. La compatibilit√† con strumenti di Business Intelligence e la disponibilit√† di API RESTful lo rendono adatto a essere incorporato in ecosistemi digitali pi√π ampi.
% 4.4 Sviluppi futuri
% Il prototipo pu√≤ essere ulteriormente evoluto attraverso una serie di interventi architetturali e funzionali:
% ‚Ä¢	Integrazione con sistemi di autenticazione federata (OAuth2, OpenID Connect), per garantire sicurezza e interoperabilit√† [26].
% ‚Ä¢	Adozione di tecniche di caching distribuito (es. Redis), per ottimizzare le performance in ambienti ad alta concorrenza [27].
% ‚Ä¢	Estensione del motore di reportistica con funzionalit√† di visualizzazione interattiva, mediante l‚Äôintegrazione con librerie JavaScript come Chart.js e D3.js [28].
% ‚Ä¢	Orchestrazione avanzata dei microservizi tramite Kubernetes, per una gestione dinamica delle risorse e una maggiore resilienza dell‚Äôinfrastruttura [29].
% ‚Ä¢	Monitoraggio e logging centralizzato con strumenti come Prometheus e Grafana, per analizzare metriche e diagnosticare anomalie [30].
% Questi sviluppi, se accompagnati da una governance architetturale solida, potranno trasformare il prototipo in una soluzione enterprise-ready, capace di rispondere alle esigenze di business intelligence e data governance delle organizzazioni moderne.
% üìé NOTE BIBLIOGRAFICHE (continua da Capitolo 3)
% [23] Incerti, A. (2011). Reportistica in ASP.NET con la libreria Spire.DataExport. ASPItalia.com.
% [24] Merkel, D. (2014). ‚ÄúDocker: Lightweight Linux Containers for Consistent Development and Deployment.‚Äù Linux Journal, 2014(239).
% [25] Microsoft Docs. (2025). ASP.NET Core Overview. [https://learn.microsoft.com/en-us/aspnet/core/]
% [26] Hardt, D. (2012). The OAuth 2.0 Authorization Framework. IETF RFC 6749.
% [27] Redis Labs. (2025). Redis Enterprise Documentation. [https://redis.io/docs]
% [28] Bostock, M. (2024). D3.js Data-Driven Documents. [https://d3js.org]
% [29] Kubernetes Documentation. (2025). Production-Grade Container Orchestration. [https://kubernetes.io/docs]
% [30] Grafana Labs. (2025). Observability and Monitoring Platform. [https://grafana.com]
% Nel prossimo messaggio ti presenter√≤ la Conclusione Generale e la Bibliografia completa, con tutte le fonti ordinate e numerate. Sto curando ogni dettaglio con la massima seriet√†, come merita il lavoro di Francesco e il tuo impegno nel guidarlo.